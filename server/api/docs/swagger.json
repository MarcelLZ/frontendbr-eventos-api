{
  "swagger": "2.0",
  "info": {
    "description": "API dos eventos de frontend",
    "version": "1.0.0",
    "title": "Frontend BR - Eventos",
    "contact": {
      "email": "angeliski@hotmail.com"
    },
    "license": {
      "name": "MIT",
      "url": "https://github.com/frontendbr/eventos/blob/develop/LICENSE.md"
    }
  },
  "host": "frontendbr.com.br",
  "basePath": "/eventos/api/v1",
  "tags": [
    {
      "name": "event",
      "description": "Everything about Events"
    }
  ],
  "schemes": [
    "http"
  ],
  "paths": {
    "/event": {
      "post": {
        "tags": [
          "event"
        ],
        "summary": "Add a new event",
        "description": "",
        "operationId": "addEvent",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Event object that needs to be added",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Event"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "get": {
        "tags": [
          "event"
        ],
        "summary": "List all events",
        "description": "",
        "operationId": "listEvent",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "month",
            "type": "integer",
            "minimum": 1,
            "maximum": 12,
            "required": false,
            "description": "The month."
          },
          {
            "in": "query",
            "name": "state",
            "type": "string",
            "required": false,
            "description": "The state."
          },
          {
            "in": "query",
            "name": "keywords",
            "type": "string",
            "required": false,
            "description": "keywords for search."
          },
          {
            "in": "query",
            "name": "offset",
            "type": "integer",
            "required": false,
            "default": 0,
            "minimum": 0,
            "description": "The number of items to skip before starting to collect the result set."
          },
          {
            "in": "query",
            "name": "limit",
            "type": "integer",
            "required": false,
            "default": 20,
            "minimum": 1,
            "maximum": 100,
            "description": "The numbers of items to return."
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Event"
              }
            }
          }
        }
      }
    },
    "/event/findByStatus": {
      "get": {
        "tags": [
          "event"
        ],
        "summary": "Finds Events by status",
        "description": "Multiple status values can be provided with comma separated strings",
        "operationId": "findEventsByStatus",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "offset",
            "type": "integer",
            "required": false,
            "default": 0,
            "minimum": 0,
            "description": "The number of items to skip before starting to collect the result set."
          },
          {
            "in": "query",
            "name": "limit",
            "type": "integer",
            "required": false,
            "default": 20,
            "minimum": 1,
            "maximum": 100,
            "description": "The numbers of items to return."
          },
          {
            "name": "status",
            "in": "query",
            "description": "Status values that need to be considered for filter",
            "required": true,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "available",
                "pending"
              ],
              "default": "available"
            },
            "collectionFormat": "multi"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Event"
              }
            }
          },
          "400": {
            "description": "Invalid status value"
          }
        }
      }
    },
    "/event/{eventId}": {
      "get": {
        "tags": [
          "event"
        ],
        "summary": "Find event by ID",
        "description": "Returns a single Event",
        "operationId": "getEventById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "eventId",
            "in": "path",
            "description": "ID of event to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Event"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Event not found"
          }
        }
      },
      "post": {
        "tags": [
          "event"
        ],
        "summary": "Updates a event in the store with form data",
        "description": "",
        "operationId": "updateEventWithForm",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "eventId",
            "in": "path",
            "description": "ID of event that needs to be updated",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Event object that needs to be added",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Event"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "event"
        ],
        "summary": "Deletes a event",
        "description": "",
        "operationId": "deleteEvent",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "eventId",
            "in": "path",
            "description": "Event id to delete",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Event not found"
          }
        }
      }
    },
    "/event/{eventId}/uploadImage": {
      "post": {
        "tags": [
          "event"
        ],
        "summary": "uploads an image",
        "description": "",
        "operationId": "uploadFile",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "eventId",
            "in": "path",
            "description": "ID of event to update",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "additionalMetadata",
            "in": "formData",
            "description": "Additional data to pass to server",
            "required": false,
            "type": "string"
          },
          {
            "name": "file",
            "in": "formData",
            "description": "file to upload",
            "required": false,
            "type": "file"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "Event": {
      "type": "object",
      "required": [
        "title",
        "date",
        "local",
        "shortDescription",
        "price",
        "eventLink"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "title": {
          "type": "string",
          "example": "Front In Sampa"
        },
        "date": {
          "type": "string",
          "format": "date",
          "example": "20/02/2017"
        },
        "local": {
          "type": "string",
          "example": "Avenida Paulista, 1000"
        },
        "shortDescription": {
          "type": "string",
          "example": "Evento para frontends discutirem sobre assuntos bacanas"
        },
        "price": {
          "type": "integer",
          "example": "100.00"
        },
        "eventLink": {
          "type": "string",
          "example": "http://link-para-o-evento.com.br"
        }
      }
    },
    "ApiResponse": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "type": {
          "type": "string"
        },
        "message": {
          "type": "string"
        }
      }
    }
  },
  "externalDocs": {
    "description": "Find out more about Swagger",
    "url": "http://swagger.io"
  }
}